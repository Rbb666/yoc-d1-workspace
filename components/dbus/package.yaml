
## 第一部分： 基础信息
name: dbus                                          # <必选项> 包名称 （符合C语言变量命名规则），长度少于等于64字节
version: v7.5.1                                    # <必选项> 组件版本号
description: a                                      # <必选项> 建议至少20字以上
type: common                                        # <必选项> 组件类型，为：solution, chip, board, common, sdk
tag: 核心模块                                       # <可选项> 组件分类，缺省值： ''
keywords:                                           # <可选项> 标签，会影响到组件被搜索的效果，合理的标签很重要
  - base
license: Apache license v2.0                        # <可选项> 源代码的许可证，要确保所有代码、文件的许可证不冲突。如：MIT，Apache license v2.0，BSD

## 第二部分：依赖信息
#           指定该组件依赖的组件及版本
# sdk_chip:                                # <可选项> 该组件依赖sdk组件，合理的依赖才能保证组件能编译、使用
#   - sdk_chip_csky_dummy: v7.4.0
#   - sdk_chip_riscv_dummy: v7.4.0

## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
build_config:
  cflag: ' -DHAVE_CONFIG_H -Wno-unused-label -Wno-unused-variable -Wno-nonnull-compare -Wno-unused-function -Wno-unused-but-set-variable '
  include:
    - ./
    - ./ext

# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
  - dbus/dbus-address.c
  - dbus/dbus-auth.c
  - dbus/dbus-bus.c
  - dbus/dbus-connection.c
  - dbus/dbus-credentials.c
  - dbus/dbus-errors.c
  - dbus/dbus-keyring.c
  - dbus/dbus-marshal-header.c
  - dbus/dbus-marshal-byteswap.c
  - dbus/dbus-marshal-recursive.c
  - dbus/dbus-marshal-validate.c
  - dbus/dbus-message.c
  - dbus/dbus-misc.c
  - dbus/dbus-nonce.c
  - dbus/dbus-object-tree.c
  - dbus/dbus-pending-call.c
  - dbus/dbus-resources.c
  - dbus/dbus-server.c
  - dbus/dbus-server-socket.c
  - dbus/dbus-server-debug-pipe.c
  - dbus/dbus-sha.c
  - dbus/dbus-signature.c
  - dbus/dbus-syntax.c
  - dbus/dbus-timeout.c
  - dbus/dbus-threads.c
  - dbus/dbus-transport.c
  - dbus/dbus-transport-socket.c
  - dbus/dbus-watch.c
  - dbus/dbus-transport-unix.c
  - dbus/dbus-server-unix.c
  - dbus/dbus-dataslot.c
  - dbus/dbus-file.c
  - dbus/dbus-hash.c
  - dbus/dbus-internals.c
  - dbus/dbus-list.c
  - dbus/dbus-marshal-basic.c
  - dbus/dbus-memory.c
  - dbus/dbus-mempool.c
  - dbus/dbus-string.c
  - dbus/dbus-sysdeps.c
  - dbus/dbus-pipe.c
  - dbus/dbus-file-unix.c
  - dbus/dbus-pipe-unix.c
  - dbus/dbus-sysdeps-unix.c
  - dbus/dbus-sysdeps-pthread.c
  - dbus/dbus-userdb.c

  - dbus/dbus-mainloop.c
  - dbus/dbus-sysdeps-util-unix.c
  - dbus/dbus-asv-util.c
  - dbus/dbus-string-util.c
  - dbus/dbus-message-util.c
  - dbus/dbus-shell.c
  - dbus/dbus-spawn.c
  - dbus/dbus-sysdeps-util.c
  - dbus/dbus-userdb-util.c
  - dbus/dbus-socket-set.c
# - dbus/dbus-socket-set-epoll.c
  - dbus/dbus-socket-set-poll.c

  - tools/dbus-launch.c

  - bus/activation.c
  - bus/apparmor.c
  - bus/audit.c
  - bus/bus.c
  - bus/config-loader-expat.c
  - bus/config-parser.c
  - bus/config-parser-common.c
  - bus/connection.c
  - bus/desktop-file.c
  - bus/dispatch.c
  - bus/driver.c
  - bus/expirelist.c
  - bus/policy.c
  - bus/selinux.c
  - bus/services.c
  - bus/signals.c
  - bus/stats.c
  - bus/test.c
  - bus/utils.c
# - bus/dir-watch-inotify.c
  - bus/main.c

  - ext/ext.c

## 第五部分：配置信息
# def_config:                              # 组件的可配置项
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y
def_config:
  CONFIG_KERNEL_RTOS: 1
  BUS_BUILT_R_DYNAMIC: y
  BUS_COMPILATION: y
# BUS_ENABLE_EMBEDDED_TESTS: y
# BUS_ENABLE_MODULAR_TESTS: y
  _GNU_SOURCE: y
  dbus_1_EXPORTS: y
  DBUS_COMPILATION: y
  PF_UNIX: 1
  AF_UNIX: 1
  SCM_RIGHTS: 0x01
  SOMAXCONN: 4096
#  SOCK_CLOEXEC: 2000000
  DBUS_MACHINE_UUID_FILE: "/lib/dbus/machine-id"
  DBUS_SYSTEM_CONFIG_FILE: "/usr/share/dbus-1/system.conf"
  DBUS_SESSION_CONFIG_FILE: "/usr/share/dbus-1/session.conf"

## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相对路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径
install:
  - dest:
    source:

## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相对路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
